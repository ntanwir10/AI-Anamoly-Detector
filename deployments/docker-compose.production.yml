# Production Deployment Configuration
# Usage: docker compose -f docker-compose.production.yml up -d

version: "3.8"

services:
  redis-cluster-1:
    image: redislabs/redismod:latest
    container_name: redis-cluster-1
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis-data-1:/data
      - ./redis-cluster.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

  redis-cluster-2:
    image: redislabs/redismod:latest
    container_name: redis-cluster-2
    ports:
      - "6380:6379"
    volumes:
      - redis-data-2:/data
      - ./redis-cluster.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

  redis-cluster-3:
    image: redislabs/redismod:latest
    container_name: redis-cluster-3
    ports:
      - "6381:6379"
    volumes:
      - redis-data-3:/data
      - ./redis-cluster.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

  data-collector:
    build:
      context: ../data-collector
      dockerfile: Dockerfile.production
    container_name: data-collector-prod
    ports:
      - "4000:4000"
    environment:
      - REDIS_HOST=redis-cluster-1
      - REDIS_PORT=6379
      - API_KEY=${API_KEY}
      - LOG_LEVEL=INFO
      - PROMETHEUS_ENABLED=true
    env_file:
      - ../.env
    depends_on:
      redis-cluster-1:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M

  aggregator:
    build: ../aggregator
    container_name: aggregator-prod
    environment:
      - REDIS_HOST=redis-cluster-1
      - REDIS_PORT=6379
      - INTERVAL_SECONDS=5
      - LOG_LEVEL=INFO
    env_file:
      - ../.env
    depends_on:
      redis-cluster-1:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 256M

  ai-service:
    build:
      context: ../ai-service
      dockerfile: Dockerfile.production
    container_name: ai-service-prod
    environment:
      - REDIS_HOST=redis-cluster-1
      - REDIS_PORT=6379
      - TRAINING_TARGET=100
      - MODEL_TYPE=isolation_forest
      - CONTAMINATION=0.02
      - LOG_LEVEL=INFO
    env_file:
      - ../.env
    depends_on:
      redis-cluster-1:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  dashboard-bff:
    build:
      context: ../dashboard-bff
      dockerfile: Dockerfile.production
    container_name: dashboard-bff-prod
    ports:
      - "8080:8080"
    environment:
      - REDIS_HOST=redis-cluster-1
      - REDIS_PORT=6379
      - WS_PORT=8080
      - NODE_ENV=production
    env_file:
      - ../.env
    depends_on:
      redis-cluster-1:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  dashboard-ui:
    build:
      context: ../dashboard-ui
      dockerfile: Dockerfile.production
    container_name: dashboard-ui-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - dashboard-bff
    networks:
      - app-network
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - app-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - app-network
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    networks:
      - app-network
    restart: unless-stopped

volumes:
  redis-data-1:
  redis-data-2:
  redis-data-3:
  prometheus-data:
  grafana-data:
  alertmanager-data:

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
